/**
 * BUnit - JUnit ala beanshell...
 */
BUnit() {
    fileUtils = FileUtils();

    /**
     * Return all test files found in dir.
     *
     * @param dir is the directory containing test files.
     */
    File[] findAllTestFiles(File dir) {
        return fileUtils.findByExtension(dir, "Test.bsh");
    }

    /**
     * Return all test files found in dir.
     *
     * @param dir is the directory containing test files.
     */
    File[] findAllTestFiles(String dir) {
        return findAllTestFiles(new File(dir));
    }

    /**
     * Run all tests found in testDir using the source found in srcDir.
     *
     * @param srcDir is the directory containing source files.
     * @param testDir is the directory containing test files.
     */
    void runTests(String srcDir, String testDir) {
        addClassPath(srcDir);
        addClassPath(testDir);

        importCommands(".");

        print("Getting all test files...");

        File[] testFiles = findAllTestFiles(testDir);

        for (File tf : testFiles) {
            print("    " + tf);
        }

        for (File testFile : testFiles) {
            print("Attempting to get class:  [" + fileUtils.computeBaseName(testFile) + "]");

            eval("toTest=" + fileUtils.computeBaseName(testFile) + "()");

            print("Iterating over methods...");

            for (String method : toTest.namespace.methods.keySet()) {
                print("    Testing method [" + method + "]");    

                if (method.startsWith("test")) {

                    bsh.BshMethod bshMethod = toTest.namespace.methods.get(method);

                    try {
                        toTest.invokeMethod(method, new Object[bshMethod.getParameterTypes().length]);
                        print("        Passed");
                    } catch(bsh.TargetError bte) {
                        Throwable e = bte.getTarget();

                        if (bshMethod.getParameterTypes().length < 1) {
                            String str = bte.toString();
                            print("        Failed:  " + str.split("\\n")[0]);
                        } else {
                            boolean isExpected = false;

                            for(Class klass : bshMethod.getParameterTypes()) {
                                if (klass.isAssignableFrom(e.getClass())) {
                                    isExpected = true;
                                }
                            }

                            if (isExpected) {
                                print("        Passed");
                            } else {
                                String str = bte.toString();
                                print("        Failed:  Unexpected exception raised - [" + e.getClass().getName() + "] - " + str.split("\\n")[0]);
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Run all tests found in testDir using the source found in srcDir.
     *
     * @param srcDir is the directory containing source files.
     * @param testDir is the directory containing test files.
     */
     /*
    void runTests(String srcDir, String testDir) {
        runTests(new File(srcDir), new File(testDir));
    }
    */

        /*
        for (URL str : getClassPath()) {
            System.out.println("Class path = " + str);
        }

        stringUtils = StringUtils();

        for (String m : stringUtils.methods) {
            System.out.println(m);
        }
    }
    */

    return this;
}