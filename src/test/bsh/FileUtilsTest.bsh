/**
 * Test the FileUtils class.
 */
FileUtilsTest() {
    import junit.framework.Assert;

    import java.nio.file.attribute.FileAttribute;

    import java.nio.file.Files;
    import java.nio.file.Path;

    fileUtils = FileUtils();

    Path tempDir;

    FileAttribute[] nullFileAttributes = new FileAttribute[0];

    /**
     * Set up a temp dir before test starts.
     */
    void before() {
        tempDir = Files.createTempDirectory("beanshell", nullFileAttributes);
    }

    /**
     * Clean up temp dir once test done.
     */
    void after() {
        for (File toDelete :  tempDir.toFile().listFiles()) {
            toDelete.delete();
        }

        Files.delete(tempDir);
    }

    /**
     * Test finding by extension where file provided is null.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_findByExtension_File_String_nullFile(IllegalArgumentException iae) {
        fileUtils.findByExtension(null, "*.tst");
    }

    /**
     * Test finding by extension where the extension is empty.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_findByExtension_File_String_emptyExtension(IllegalArgumentException iae) {
        fileUtils.findByExtension(new File("/tmp/foo"), "");
    }

    /**
     * Test finding by extension where the extension is blank.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_findByExtension_File_String_blankExtension(IllegalArgumentException iae) {
        fileUtils.findByExtension(new File("/tmp/foo"), "   ");
    }

    /**
     * Test finding by extension where the extension is null.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_findByExtension_File_String_nullExtension(IllegalArgumentException iae) {
        fileUtils.findByExtension(new File("/tmp/foo"), null);
    }

    /**
     * Test finding by extension.
     */
    void test_findByExtension_File_String() {
        int total = 10;
        List files = new ArrayList(total);

        for (int index = 0; index < total; index++) {
            files.add(Files.createTempFile(tempDir, "testPrefix", "testSuffix", nullFileAttributes).toFile());
        }

        File file1 = Files.createTempFile(tempDir, "prefix1", "suffix1", nullFileAttributes).toFile();
        File file2 = Files.createTempFile(tempDir, "prefix2", "suffix2", nullFileAttributes).toFile();

        for (File fileFound : fileUtils.findByExtension(tempDir.toFile(), "testSuffix")) {
            Assert.assertTrue("Should have deleted the file", fileFound.delete());
            Assert.assertTrue("Should have removed the file", files.remove(fileFound));
        }

        Assert.assertEquals("Should have 2 files left", 2, tempDir.toFile().list().length);

        Assert.assertTrue("Should have removed file", file1.delete());
        Assert.assertTrue("Should haveremoved file", file2.delete());

        Assert.assertEquals("Should be no files", 0, tempDir.toFile().list().length);
    }

    /**
     * Test finding by extension where file provided is null.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_findByExtension_String_String_nullFile(IllegalArgumentException iae) {
        fileUtils.findByExtension(null, "*.tst");
    }

    /**
     * Test finding by extension where file provided is empty.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_findByExtension_String_String_emptyFile(IllegalArgumentException iae) {
        fileUtils.findByExtension("", "*.tst");
    }

    /**
     * Test finding by extension where file provided is blank.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_findByExtension_String_String_blankFile(IllegalArgumentException iae) {
        fileUtils.findByExtension("  ", "*.tst");
    }

    /**
     * Test finding by extension where the extension is empty.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_findByExtension_String_String_emptyExtension(IllegalArgumentException iae) {
        fileUtils.findByExtension("/tmp/foo", "");
    }

    /**
     * Test finding by extension where the extension is blank.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_findByExtension_String_String_blankExtension(IllegalArgumentException iae) {
        fileUtils.findByExtension("/tmp/foo", "   ");
    }

    /**
     * Test finding by extension where the extension is null.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_findByExtension_String_String_nullExtension(IllegalArgumentException iae) {
        fileUtils.findByExtension("/tmp/foo", null);
    }

    /**
     * Test finding by extension.
     */
    void test_findByExtension_String_String() {
        int total = 10;
        List files = new ArrayList(total);

        for (int index = 0; index < total; index++) {
            files.add(Files.createTempFile(tempDir, "testPrefix", "testSuffix", nullFileAttributes).toFile());
        }

        File file1 = Files.createTempFile(tempDir, "prefix1", "suffix1", nullFileAttributes).toFile();
        File file2 = Files.createTempFile(tempDir, "prefix2", "suffix2", nullFileAttributes).toFile();

        for (File fileFound : fileUtils.findByExtension(tempDir.toFile().getCanonicalPath(), "testSuffix")) {
            Assert.assertTrue("Should have deleted the file", fileFound.delete());
            Assert.assertTrue("Should have removed the file", files.remove(fileFound));
        }

        Assert.assertEquals("Should have 2 files left", 2, tempDir.toFile().list().length);

        Assert.assertTrue("Should have removed file", file1.delete());
        Assert.assertTrue("Should haveremoved file", file2.delete());

        Assert.assertEquals("Should be no files", 0, tempDir.toFile().list().length);
    }

    /**
     * Test computing a relative directory name when a null is provided.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_computeRelativeDirName_null(IllegalArgumentException iae) {
        fileUtils.computeDirName(null);
    }

    /**
     * Test computing a relative directory name when a blank is provided.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_computeRelativeDirName_blank(IllegalArgumentException iae) {
        fileUtils.computeDirName("    ");
    }

    /**
     * Test computing a relative directory name when an empty string is provided.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_computeRelativeDirName_empty(IllegalArgumentException iae) {
        fileUtils.computeDirName("");
    }

    /**
     * Test computing a relative directory name.
     */
    void test_computeRelativeDirName() {
        Assert.assertEquals("Should be the correct dir name", "bar", fileUtils.computeRelativeDirName("/foo/bar/alpha.txt"));
        Assert.assertEquals("Should be the correct dir name", "", fileUtils.computeRelativeDirName("bar"));
        Assert.assertEquals("Should be the correct dir name", "bar", fileUtils.computeRelativeDirName("bar/alpha"));
        Assert.assertEquals("Should be the correct dir name", "", fileUtils.computeRelativeDirName("/beta.txt"));
    }

    /**
     * Test computing a directory name where the file is null.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_computeDirName_String_null(IllegalArgumentException iae) {
        fileUtils.computeDirName((String) null);
    }

    /**
     * Test computing a directory name where the file is blank.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_computeDirName_String_blank(IllegalArgumentException iae) {
        fileUtils.computeDirName("    ");
    }

    /**
     * Test computing a directory name where the file is empty.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_computeDirName_String_empty(IllegalArgumentException iae) {
        fileUtils.computeDirName("");
    }

    /**
     * Test computing a directory name.
     */
    void test_computeDirName_String() {
        Assert.assertEquals("Should be the correct dir name", "/foo/bar", fileUtils.computeDirName("/foo/bar/alpha.txt"));
        Assert.assertEquals("Should be the correct dir name", "", fileUtils.computeDirName("bar"));
        Assert.assertEquals("Should be the correct dir name", "bar", fileUtils.computeDirName("bar/alpha"));
        Assert.assertEquals("Should be the correct dir name", "/", fileUtils.computeDirName("/beta.txt"));
    }

    /**
     * Test computing a directory name where the file is blank.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_computeDirName_File_null(IllegalArgumentException iae) {
        fileUtils.computeDirName((File) null);
    }

    /**
     * Test computing a directory name.
     */
    void test_computeDirName_File() {
        Assert.assertEquals("Should be the correct dir name", "/foo/bar", fileUtils.computeDirName(new File("/foo/bar/alpha.txt")));
        Assert.assertEquals("Should be the correct dir name", bsh.cwd, fileUtils.computeDirName(new File("bar")));
        Assert.assertEquals("Should be the correct dir name", bsh.cwd + System.getProperty("file.separator") + "bar", fileUtils.computeDirName(new File("bar/alpha")));
        Assert.assertEquals("Should be the correct dir name", "/", fileUtils.computeDirName(new File("/beta.txt")));
    }

    /**
     * Tests computing the base name of a null file.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_computeBaseName_File_null(IllegalArgumentException iae) {
        fileUtils.computeBaseName((File) null);
    }

    /**
     * Tests computing the base name of a file.
     */
    void test_computeBaseName_File() {
        Assert.assertEquals("Should be the correct base name", "theta", fileUtils.computeBaseName(new File("/home/alpha/beta/theta.txt")));
        Assert.assertEquals("Should be the correct base name", "theta", fileUtils.computeBaseName(new File("/home/alpha/beta/theta")));
        Assert.assertEquals("Should be the correct base name", "foo", fileUtils.computeBaseName(new File("/foo.txt")));
        Assert.assertEquals("Should be the correct base name", "foo", fileUtils.computeBaseName(new File("foo.txt")));
    }

    /**
     * Tests computing the base name of a null file name.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_computeBaseName_String_null(IllegalArgumentException iae) {
        fileUtils.computeBaseName((String) null);
    }

    /**
     * Tests computing the base name of a blank file name.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_computeBaseName_String_blank(IllegalArgumentException iae) {
        fileUtils.computeBaseName("    ");
    }

    /**
     * Tests computing the base name of an empty file name.
     *
     * Should raise an IllegalArgumentException.
     */
    void test_computeBaseName_String_empty(IllegalArgumentException iae) {
        fileUtils.computeBaseName("");
    }

    /**
     * Tests computing the base name of a file.
     */
    void test_computeBaseName_String() {
        Assert.assertEquals("Should be the correct base name", "theta", fileUtils.computeBaseName("/home/alpha/beta/theta.txt"));
        Assert.assertEquals("Should be the correct base name", "theta", fileUtils.computeBaseName("/home/alpha/beta/theta"));
        Assert.assertEquals("Should be the correct base name", "foo", fileUtils.computeBaseName("/foo.txt"));
        Assert.assertEquals("Should be the correct base name", "foo", fileUtils.computeBaseName("foo.txt"));
    }

    /**
     * Tests file computation.
     */
    void test_computeFiles() {
        Assert.assertNotNull("Should not be null", fileUtils.computeFiles(null));
        Assert.assertEquals("Should be no elements", 0, fileUtils.computeFiles(null).length);

        File[] toCheck = new File[] {new File("/foo/bar"), new File("/alpha/beta")};

        Assert.assertSame("Should be same", toCheck, fileUtils.computeFiles(toCheck));
    }

    /**
     * Test if a dir using a null string.
     *
     * Should throw an IllegalArgumentException.
     */
    void test_isDir_null(IllegalArgumentException iae) {
        fileUtils.isDir(null);
    }

    /**
     * Test if a dir using a blank string.
     *
     * Should throw an IllegalArgumentException.
     */
    void test_isDir_blank(IllegalArgumentException iae) {
        fileUtils.isDir("    ");
    }

    /**
     * Test if a dir using an empty string.
     *
     * Should throw an IllegalArgumentException.
     */
    void test_isDir_empty(IllegalArgumentException iae) {
        fileUtils.isDir("");
    }

    /**
     * Test if a dir.
     */
    void test_isDir() {
        File file1 = Files.createTempFile(tempDir, "is", "file", nullFileAttributes).toFile();
        File file2 = Files.createTempFile(tempDir, "is", "file", nullFileAttributes).toFile();

        File dir1 = Files.createTempDirectory(tempDir, "dir", nullFileAttributes).toFile();
        File dir2 = Files.createTempDirectory(tempDir, "dir", nullFileAttributes).toFile();

        Assert.assertFalse("Should not be a directory", fileUtils.isDir(file1.getAbsolutePath()));
        Assert.assertFalse("Should not be a directory", fileUtils.isDir(file2.getAbsolutePath()));

        Assert.assertTrue("Should be a directory", fileUtils.isDir(dir1.getAbsolutePath()));
        Assert.assertTrue("Should be a directory", fileUtils.isDir(dir2.getAbsolutePath()));
    }

    /**
     * Test converting a null file to a string.
     *
     * Should throw an IllegalArgumentException.
     */
    void test_toString_File_null(IllegalArgumentException iae) {
        fileUtils.toString((File) null);
    }

    /**
     * Test converting a file to a string.
     */
    void test_toString_File() {
        File file1 = Files.createTempFile(tempDir, "to", "string", nullFileAttributes).toFile();

        String toCompare = "This is from " + System.currentTimeMillis();

        fileUtils.toFile(file1, toCompare);

        Assert.assertEquals("Should be the same contents", toCompare, fileUtils.toString(file1));
    }

    /**
     * Test converting a null file name to a string.
     *
     * Should throw an IllegalArgumentException.
     */
    void test_toString_String_null(IllegalArgumentException iae) {
        fileUtils.toString((String) null);
    }

    /**
     * Test converting a blank file name to a string.
     *
     * Should throw an IllegalArgumentException.
     */
    void test_toString_String_blank(IllegalArgumentException iae) {
        fileUtils.toString("    ");
    }

    /**
     * Test converting an empty file name to a string.
     *
     * Should throw an IllegalArgumentException.
     */
    void test_toString_String_empty(IllegalArgumentException iae) {
        fileUtils.toString("");
    }

    /**
     * Test converting a file to a string.
     */
    void test_toString_String() {
        String file1 = Files.createTempFile(tempDir, "to", "string", nullFileAttributes).toFile().getAbsolutePath();

        String toCompare = "This is from " + System.currentTimeMillis();

        fileUtils.toFile(file1, toCompare);

        Assert.assertEquals("Should be the same contents", toCompare, fileUtils.toString(file1));
    }

    /**
     * Test converting a string to a file where the file is null.
     *
     * Should throw an IllegalArgumentException.
     */
    void test_toFile_File_null(IllegalArgumentException iae) {
        fileUtils.toFile((File) null, "");
    }

    /**
     * Test converting a string to a file where the file name is null.
     *
     * Should throw an IllegalArgumentException.
     */
    void test_toFile_String_null(IllegalArgumentException iae) {
        fileUtils.toFile((String) null, "");
    }

    /**
     * Test converting a string to a file where the file name is blank.
     *
     * Should throw an IllegalArgumentException.
     */
    void test_toFile_String_blank(IllegalArgumentException iae) {
        fileUtils.toFile("    ", "");
    }

    /**
     * Test converting a string to a file where the file name is empty.
     *
     * Should throw an IllegalArgumentException.
     */
    void test_toFile_String_empty(IllegalArgumentException iae) {
        fileUtils.toFile("", "");
    }

    return this;
}